/*******************************************************************************
 * Copyright (c) 2024 BIA-Technologies Limited Liability Company.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/

package ru.biatech.edt.junit.ui.commands;

import com._1c.g5.v8.dt.bsl.model.Module;
import com._1c.g5.v8.dt.core.platform.IConfigurationProject;
import com._1c.g5.v8.dt.metadata.mdclass.CommonModule;
import lombok.experimental.UtilityClass;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.jobs.Job;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.IFileEditorInput;
import org.eclipse.xtext.ui.editor.XtextEditor;
import ru.biatech.edt.junit.ui.dialogs.Dialogs;
import ru.biatech.edt.junit.ui.editor.EditorHelper;
import ru.biatech.edt.junit.ui.testitemaction.DebugTestCaseAction;
import ru.biatech.edt.junit.ui.testitemaction.GenerateMock;
import ru.biatech.edt.junit.ui.testitemaction.GotoTestCaseAction;
import ru.biatech.edt.junit.ui.testitemaction.GotoTestSuiteAction;
import ru.biatech.edt.junit.ui.testitemaction.ITestItemAction;
import ru.biatech.edt.junit.ui.testitemaction.NewTestCaseAction;
import ru.biatech.edt.junit.ui.testitemaction.NewTestSuiteAction;
import ru.biatech.edt.junit.ui.testitemaction.RunTestCaseAction;
import ru.biatech.edt.junit.ui.testitemaction.UpdateTestSuiteAction;
import ru.biatech.edt.junit.v8utils.Projects;
import ru.biatech.edt.junit.yaxunit.Constants;
import ru.biatech.edt.junit.yaxunit.Engine;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@UtilityClass
public class OpenTestActionsHandler {

  public void execute(ExecutionEvent event) {
    XtextEditor target = EditorHelper.getEditor(event);

    if (!isRightEditor(target)) {
      return;
    }
    var currentModuleMethod = EditorHelper.getNearestModuleMethod(target);
    if (currentModuleMethod.getFirst() == null) {
      return;
    }
    var methodName = currentModuleMethod.getSecond() != null ? currentModuleMethod.getSecond().getName() : null;
    execute(currentModuleMethod.getFirst(), methodName);
  }

  public void execute(XtextEditor editor, String methodName) {
    var module = EditorHelper.getModule(editor);
    execute(module, methodName);
  }

  private boolean isRightEditor(XtextEditor target) {
    if (target != null) {
      IFileEditorInput input = (IFileEditorInput) target.getEditorInput();
      IFile file = input.getFile();
      return file != null && file.getProject() != null;
    } else {
      return false;
    }
  }

  private void execute(final Module module, final String methodName) {
    Job.create("Prepare actions", monitor -> { //$NON-NLS-1$
      var actions = Engine.isTestModule(module) ? getTestSuiteActions(module, methodName) : getActions(module, methodName);
      Display.getDefault().asyncExec(() -> Dialogs.executeTestAction(actions, module, methodName));
    }).schedule();
  }

  private List<ITestItemAction> getActions(Module module, String methodName) {
    var actions = new ArrayList<ITestItemAction>();
    var testSuiteName = Engine.getTestSuiteName(module);
    var isConfiguration = Projects.getParentProject(module) instanceof IConfigurationProject;

    var existingTestSuites = Engine.getTestSuites(module).collect(Collectors.toList());
    var existingTestModules = existingTestSuites.stream()
        .map(CommonModule::getModule)
        .collect(Collectors.toList());
    var defaultSuite = existingTestSuites.stream()
        .filter(m -> m.getName().equals(testSuiteName))
        .findFirst();

    existingTestSuites.forEach(m -> actions.add(new GotoTestSuiteAction(m)));
    if (defaultSuite.isPresent()) {
      actions.add(new UpdateTestSuiteAction(defaultSuite.get(), module));
    } else {
      actions.add(new NewTestSuiteAction(module));
    }
    if (methodName != null) {
      actions.add(new NewTestCaseAction(module, methodName, existingTestModules));

      existingTestSuites.stream()
          .flatMap(testSuite -> testSuite.getModule().allMethods().stream()
              .filter(tm -> tm.getName().equals(methodName) || tm.getName().startsWith(methodName + '_'))
              .map(m -> new GotoTestCaseAction(testSuite, m.getName())))
          .forEach(actions::add);
      if (isConfiguration) {
        actions.add(new GenerateMock(module, methodName));
      }
    }
    return actions;
  }

  private List<ITestItemAction> getTestSuiteActions(Module module, String methodName) {
    var actions = new ArrayList<ITestItemAction>();
    if (methodName != null) {
      actions.add(new RunTestCaseAction(module, methodName));
      actions.add(new DebugTestCaseAction(module, methodName));
    }
    actions.add(new NewTestCaseAction(null, methodName != null ? methodName : Constants.NEW_TEST_DEFAULT_NAME, List.of(module)));

    return actions;
  }
}
